// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotNetAcademy.DAL.Context;

namespace dotNetAcademy.DAL.Migrations
{
    [DbContext(typeof(DotNetAcademyDbContext))]
    partial class DotNetAcademyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f6aee173-e7fb-43a2-89ff-9c95416a85d5",
                            ConcurrencyStamp = "b183430a-338a-4352-a25c-2dc1564d9d29",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "dd621420-78ac-4031-9696-8ef275943ced",
                            ConcurrencyStamp = "8958a06b-ee65-45ab-ade3-9a4aa7251cf0",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("dotNetAcademy.DAL.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MaxParticipants");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StreetAndNumber");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "11cac6fb-81fe-45d3-854d-9ba4a66f19cb",
                            AccessFailedCount = 0,
                            City = "Westerlo",
                            ConcurrencyStamp = "e673f2a0-b8e0-4be3-b621-cd32eea8907d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MaxParticipants = 10,
                            Name = "BitConsult",
                            PhoneNumberConfirmed = false,
                            StreetAndNumber = "HeultjeWeg 1",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "df39664c-5a15-4063-900d-7a67e09c281e",
                            AccessFailedCount = 0,
                            City = "Westerlo",
                            ConcurrencyStamp = "edd0a456-de33-48bf-8284-1c533f399076",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MaxParticipants = 10,
                            Name = "IT4IT",
                            PhoneNumberConfirmed = false,
                            StreetAndNumber = "HeultjeWeg 1",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "rf39664c-5a15-4063-900d-7a67e09c281d",
                            AccessFailedCount = 0,
                            City = "Edegem",
                            ConcurrencyStamp = "2067bd6d-749a-4b58-8ddc-49680ebbf6d0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MaxParticipants = 10,
                            Name = "2Commit",
                            PhoneNumberConfirmed = false,
                            StreetAndNumber = "EdegemWeg 1",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "df39664c-5a15-4063-900d-7a67e09c281d",
                            AccessFailedCount = 0,
                            City = "Westerlo",
                            ConcurrencyStamp = "17f723f8-a23f-4995-8fb8-ec7fde1048c7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MaxParticipants = 10,
                            Name = "IT4IT",
                            PhoneNumberConfirmed = false,
                            StreetAndNumber = "Heulte 1",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("dotNetAcademy.DAL.Entities.Participant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = "bb6799f7-28e1-473e-9293-7b64bca27a32",
                            CustomerId = "df39664c-5a15-4063-900d-7a67e09c281e",
                            Email = "info@ive.be",
                            EndDate = new DateTime(2100, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ive",
                            LastName = "Verstappen",
                            StartDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "aa6799f7-28e1-473e-9293-7b64bca27a32",
                            CustomerId = "rf39664c-5a15-4063-900d-7a67e09c281d",
                            Email = "info@yari.be",
                            EndDate = new DateTime(2100, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Yari",
                            LastName = "Matthe",
                            StartDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotNetAcademy.DAL.Entities.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotNetAcademy.DAL.Entities.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotNetAcademy.DAL.Entities.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotNetAcademy.DAL.Entities.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotNetAcademy.DAL.Entities.Participant", b =>
                {
                    b.HasOne("dotNetAcademy.DAL.Entities.Customer", "Customer")
                        .WithMany("Participants")
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
